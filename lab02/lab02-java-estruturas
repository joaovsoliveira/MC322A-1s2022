{"cells":[{"metadata":{},"cell_type":"markdown","source":"# Laboratório em Estruturas de Programação Java\n\nO laboratório a seguir serve para praticar estruturas de programação Java sem compromisso com a orientação a objetos."},{"metadata":{},"cell_type":"markdown","source":"## Desafio 1 - Empréstimo\n\nEm um financiamento com juros compostos e número de parcelas fixas parte-se dos seguintes parâmetros:\n* `S` - valor da primeira parcela\n* `N` - número de parcelas\n* `J` - percentual de juros mensal\n\nA primeira parcela a ser paga do financiamento é sempre igual a `S`. A partir daí é feita uma atualização mensal da parcela, em que cada nova parcela é calculada a partir da parcela do mês anterior, conforme a fórmula:\n\n> Parcela<sub>mês</sub> = Parcela<sub>mês-1</sub> * (1 + `J` / 100)\n\nO financiamento encerra quando as `N` parcelas são pagas.\n\nExemplo:\n* `S`: 200\n* `N`: 5\n* `J`: 1%\n\nParcelas do financiamento:\n`200`; `202`; `204.02`; `206.06`; `208.12`"},{"metadata":{},"cell_type":"markdown","source":"### Desafio 1 / Parte 1 - Escrevendo o programa sem módulos\n\nDado o problema descrito, escreva um programa que calcule as parcelas de um empréstimo para os seguintes valores:\n* S: 200\n* N: 5\n* J: 1%\n\nNesta versão não use outro módulo além da função principal."},{"metadata":{"trusted":true},"cell_type":"code","source":"    float s=200, j=1;\n    int n=5;\n    for(int i=0; i<n-1; i++){\n        s = s*(1+(j/100));\n        System.out.printf(\"%.2f \",s);\n    }","execution_count":1,"outputs":[{"output_type":"stream","text":"202.00 204.02 206.06 208.12 ","name":"stdout"},{"output_type":"execute_result","execution_count":1,"data":{"text/plain":"null"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"### Desafio 1 / Parte 2 - Escrevendo módulos\n\nReescreva o código acima de forma que seu programa faça uso de uma função que seja responsável pelo cálculo de uma parcela X do empréstimo. Podem ser usadas mais funções (métodos) conforme a necessidade."},{"metadata":{"trusted":true},"cell_type":"code","source":"public class ProximaParcela{\n    static void Emprestimo(float s, int n, float j){\n        for(int i=0; i<n-1; i++){\n        s = s*(1+(j/100));\n        System.out.printf(\"%.2f \",s);\n        }\n    }\n}","execution_count":2,"outputs":[{"output_type":"execute_result","execution_count":2,"data":{"text/plain":"com.twosigma.beaker.javash.bkr156fcdbd.ProximaParcela"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"ProximaParcela.Emprestimo(200, 5, 1);","execution_count":4,"outputs":[{"output_type":"stream","text":"202.00 204.02 206.06 208.12 ","name":"stdout"},{"output_type":"execute_result","execution_count":4,"data":{"text/plain":"null"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"## Desafio 2\n\nEscreva um programa que sorteie um número inteiro entre `0` e `9999` o número deve ser mostrado, em seguida convertido para binário e a versão binária deve ser apresentada no console. A conversão decimal/binário deve ser computada por um programa feito por você."},{"metadata":{"trusted":true},"cell_type":"code","source":"import java.util.Random;\n\nRandom rand = new Random();\n\nint num=rand.nextInt(9999);\nint n=0;\nint binario[] = new int[16];\n\n\nwhile(num>2){\n    binario[n] = num%2;\n    num = num/2;\n    n++;\n}\nn++;\n\nif(num==2){\n    binario[n] = 1;\n}else{\n    binario[n] = 0;\n}\n\nfor(int j=n; j>=0; j--){\n    System.out.printf(\"%d\",binario[j]);\n}","execution_count":20,"outputs":[{"output_type":"stream","text":"1000110111101","name":"stdout"},{"output_type":"execute_result","execution_count":20,"data":{"text/plain":"null"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"## Desafio 3\n\nUma molécula de DNA pode ser definida a partir de uma cadeia que representa a sequência de suas bases:\nA - Adenina\nC - Citisina\nG - Guanina\nT - Tinina\n\nDesse modo, uma string pode ser usada para representar um segmento do DNA da seguinte maneira: `ATTACGCGCAAAC`.\n\nEscreva uma função (método) que codifique a cadeia de RNA produzida a partir de uma cadeia de DNA. A função deve ser genérica o suficiente para ser aplicável a qualquer cadeia. A entrada é uma string (DNA) e o retorno é uma string (RNA).\n\nEscreva um programa que teste esta função com uma cadeia de DNA de sua escolha."},{"metadata":{"trusted":true},"cell_type":"code","source":"public class Transcricao{\n    static void Transcreve(String DNA[]){\n        int tam = DNA.length;\n        String RNA[] = new String[tam];\n        for(int i=0; i<DNA.length; i++){\n            if(DNA[i].equalsIgnoreCase(\"A\")){\n                RNA[i] = \"U\";\n            }else if(DNA[i].equalsIgnoreCase(\"T\")){\n                RNA[i] = \"A\";\n            }else if(DNA[i].equalsIgnoreCase(\"C\")){\n                RNA[i] = \"G\";\n            }else if(DNA[i].equalsIgnoreCase(\"G\")){\n                RNA[i] = \"C\";\n            }\n        }\n        for(int j=0; j<DNA.length;j++){\n            System.out.print(RNA[j]);\n        }\n    }\n}","execution_count":6,"outputs":[{"output_type":"execute_result","execution_count":6,"data":{"text/plain":"com.twosigma.beaker.javash.bkr5940c28a.Transcricao"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"String DNA[] = {\"A\",\"T\",\"T\",\"A\",\"C\",\"G\",\"C\",\"G\",\"C\",\"A\",\"A\",\"A\",\"C\"};\nTranscricao.Transcreve(DNA);","execution_count":7,"outputs":[{"output_type":"stream","text":"UAAUGCGCGUUUG","name":"stdout"},{"output_type":"execute_result","execution_count":7,"data":{"text/plain":"null"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"## Desafio 4\n\nUma empresa precisa realizar uma estatística do salário de seus funcionários.\n\nPara fins de teste, os salários devem ser gerados aleatoriamente com valores variando entre R\\\\$ 2.500 e R\\\\$ 15.000.\n\nEscreva um programa que gere uma lista contendo os salários de 50 funcionários da empresa e mostre no console quantos funcionários ganham salário acima da média."},{"metadata":{"trusted":true},"cell_type":"code","source":"import java.util.Random;\n\nRandom rand = new Random();\n\nfloat salarios[] = new float[50];\n\nfor(int i=0; i<50; i++){\n    salarios[i] = rand.nextInt(15000 - 2500)+2500;\n}\n\nfloat total_salarios = 0;\n\nfor(int i=0; i<50; i++){\n    total_salarios += salarios[i];\n}\n\nint salarios_acima = 0;\n\nfor(int i=0; i<50; i++){\n    if(salarios[i]>(total_salarios/50)){\n        salarios_acima++;\n    }\n}\n\nSystem.out.printf(\"Salarios acima:%d\", salarios_acima);","execution_count":16,"outputs":[{"output_type":"stream","text":"Salarios acima:23","name":"stdout"},{"output_type":"execute_result","execution_count":16,"data":{"text/plain":"null"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"java","display_name":"Java","language":"java"},"language_info":{"nbconverter_exporter":"","codemirror_mode":"text/x-java","name":"Java","mimetype":"","file_extension":".java","version":"1.8.0_121"},"toc":{"nav_menu":{},"number_sections":false,"sideBar":false,"skip_h1_title":false,"base_numbering":1,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":false,"toc_window_display":false}},"nbformat":4,"nbformat_minor":4}
